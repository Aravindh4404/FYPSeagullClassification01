#
# # ------------------------------------
# # VGGModified Architecture
# # ------------------------------------
# class VGGModified(nn.Module):
#     def __init__(self):
#         super(VGGModified, self).__init__()
#         self.vgg = models.vgg16(weights=models.VGG16_Weights.IMAGENET1K_V1)
#         self.vgg.classifier = nn.Sequential(
#             nn.Linear(25088, 4096),
#             nn.ReLU(inplace=True),
#             nn.Dropout(0.5),
#             nn.Linear(4096, 4096),
#             nn.ReLU(inplace=True),
#             nn.Dropout(0.5),
#             nn.Sequential(
#                 nn.Dropout(0.4),
#                 nn.Linear(4096, 2)
#             )
#         )
#
#     def forward(self, x):
#         return self.vgg(x)
#
#
from torchvision.models import VGG16_Weights

# # Load the trained VGG model
# class VGG16Modified(nn.Module):
#     def __init__(self):
#         super(VGG16Modified, self).__init__()
#         from torchvision.models import VGG16_Weights
#         self.vgg = models.vgg16(weights=VGG16_Weights.IMAGENET1K_V1)
#         # Replace the classifier with a custom binary classification layer
#         num_ftrs = self.vgg.classifier[6].in_features
#         self.vgg.classifier[6] = nn.Sequential(
#             nn.Dropout(0.5),
#             nn.Linear(num_ftrs, 2)
#         )
#
#     def forward(self, x):
#         return self.vgg(x)
